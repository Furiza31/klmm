datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int                 @id @default(autoincrement())
  name          String?
  email         String?             @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  language      String              @default("en-US")
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  taskGroups        TaskGroup[]     @relation("TaskGroups")

  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  user User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model TaskGroup {
  id       Int       @id @default(autoincrement())
  name     String
  userId   Int

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, name: "TaskGroups")
  tasks    Task[]    @relation("GroupTasks")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id       Int         @id @default(autoincrement())
  name     String
  details  String?
  dueDate  String?
  dueTime  String?
  groupId  Int
  done     Boolean     @default(false)

  group    TaskGroup   @relation(fields: [groupId], references: [id], onDelete: Cascade, name: "GroupTasks")

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
